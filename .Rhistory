plot(data$toy[plot_seq[1]:plot_seq[2]], data$p[plot_seq[1]:plot_seq[2]], type='l', col='black', lwd=2, xlim=data$toy[plot_seq[1]:plot_seq[3]])
plot(data$toy[plot_seq[1]:plot_seq[2]], data$p[plot_seq[1]:plot_seq[2]], type='l', col='black', lwd=2, xlim=c(data$toy[plot_seq[1]], data$toy[plot_seq[3]])
plot(data$toy[plot_seq[1]:plot_seq[2]], data$p[plot_seq[1]:plot_seq[2]], type='l', col='black', lwd=2, xlim=c(data$toy[plot_seq[1]], data$toy[plot_seq[3]]))
plot(data$toy[plot_seq[1]:plot_seq[2]], data$p[plot_seq[1]:plot_seq[2]], type='l', col='black', lwd=2, xlim=c(data$toy[plot_seq[1]], data$toy[plot_seq[3]]))
lines(data$toy[(plot_seq[2]+1):plot_seq[3]], data$p[(plot_seq[2]+1):plot_seq[3]], type='l', col='blue', lwd=2)
config <- read.csv("config.txt")
# Plot end of training data
plot_seq <- c(config$N_train - config$N_train_vis, config$N_train, config$N_train + config$N_valid_vis)
plot(data$toy[plot_seq[1]:plot_seq[2]], data$p[plot_seq[1]:plot_seq[2]], type='l', col='black', lwd=2, xlim=c(data$toy[plot_seq[1]], data$toy[plot_seq[3]]))
lines(data$toy[(plot_seq[2]+1):plot_seq[3]], data$p[(plot_seq[2]+1):plot_seq[3]], type='l', col='blue', lwd=2)
setwd("C:\\Users\\CHSWA\\OneDrive - Ørsted\\DTU\\semester_1\\02427_advanced_tsa\\projects\\02427-wind-power-forecast")
# Get data and set `t` as POSIX
data <- read.csv("data/data/cex4WindDataInterpolated.csv")
config <- read.csv("config.txt")
data$t <- as.POSIXct(data$t)
# Remove nans (for now)
data <- na.omit(data)
# Get shortened data for plotting
shortenData <- function(n, data) {
index <- sample.int(dim(data)[1], n)
return(data[index,])
}
shortData <- shortenData(1000, data)
# Separate data
NEData <- shortData[which(shortData$Wd1 <= 90),]
SEData <- shortData[which(shortData$Wd1 <= 90*2 & shortData$Wd1 > 90),]
SWData <- shortData[which(shortData$Wd1 <= 90*3 & shortData$Wd1 > 90*2),]
NWData <- shortData[which(shortData$Wd1 <= 90*4 & shortData$Wd1 > 90*2),]
dirData <- list("NW"=NWData, "NE"=NEData, "SW"=SWData, "SE"=SEData)
# Plot
par(mfrow = c(2, 2))
par(oma = c(4, 4, 0, 0))
par(mar = c(0.3, 0.3, 0.3, 0.3))
for (name in names(dirData))
{
plot(dirData[[name]]$Ws1, dirData[[name]]$p, pch=20, axes=FALSE, frame.plot=TRUE)
legend("topleft", legend=name)
if (name == "NW" | name == "SW")
{
axis(2)
}
if (name == "SW" | name == "SE")
{
axis(1)
}
}
mtext("Power [kW]", side=2, outer=TRUE, line=2)
mtext("Forecasted wind speed [m/s]", side=1, outer=TRUE, line=2)
# 3d plot
library(rgl)
open3d()
points3d(shortData$Wd1, shortData$Ws1, shortData$p)
aspect3d(c(1,1,1))
axes3d()
title3d(xlab = "Direction [deg]", ylab="Forecasted wind speed [m/s]", zlab="Power [kW]")
# Kernel estimate
fit <- loess('p ~ Ws1 + Wd1', shortData, span = 0.8)
nplot <- 20
x1Seq <- seq(min(shortData$Wd1), max(shortData$Wd1), len=nplot)
y1Seq <- seq(min(shortData$Ws1), max(shortData$Ws1), len=nplot)
yprd <- outer(x1Seq, y1Seq, function(Wd1, Ws1){predict(fit, data.frame(Wd1 = Wd1, Ws1 = Ws1))})
surface3d(x1Seq, y1Seq, yprd, color="blue", alpha=0.5)
# Plot end of training data
plot_seq <- c(config$N_train - config$N_train_vis, config$N_train, config$N_train + config$N_valid_vis)
plot(data$toy[plot_seq[1]:plot_seq[2]], data$p[plot_seq[1]:plot_seq[2]], type='l', col='black', lwd=2, xlim=c(data$toy[plot_seq[1]], data$toy[plot_seq[3]]))
lines(data$toy[(plot_seq[2]+1):plot_seq[3]], data$p[(plot_seq[2]+1):plot_seq[3]], type='l', col='blue', lwd=2)
par(mfrow = c(1, 1))
par(oma = c(4, 4, 0, 0))
par(mar = c(0.3, 0.3, 0.3, 0.3))
plot_seq <- c(config$N_train - config$N_train_vis, config$N_train, config$N_train + config$N_valid_vis)
plot(data$toy[plot_seq[1]:plot_seq[2]], data$p[plot_seq[1]:plot_seq[2]], type='l', col='black', lwd=2, xlim=c(data$toy[plot_seq[1]], data$toy[plot_seq[3]]))
lines(data$toy[(plot_seq[2]+1):plot_seq[3]], data$p[(plot_seq[2]+1):plot_seq[3]], type='l', col='blue', lwd=2)
par(mfrow = c(1, 1))
par(oma = c(4, 4, 0, 0))
par(mar = c(0.3, 0.3, 0.3, 0.3))
plot_seq <- c(config$N_train - config$N_train_vis, config$N_train, config$N_train + config$N_valid_vis)
plot(data$toy[plot_seq[1]:plot_seq[2]], data$p[plot_seq[1]:plot_seq[2]], type='l', col='black', lwd=2, xlim=c(data$toy[plot_seq[1]], data$toy[plot_seq[3]]), xlab="toy", ylab="Power")
lines(data$toy[(plot_seq[2]+1):plot_seq[3]], data$p[(plot_seq[2]+1):plot_seq[3]], type='l', col='blue', lwd=2)
par(mfrow = c(1, 1))
par(oma = c(4, 4, 0, 0))
par(mar = c(0.3, 0.3, 0.3, 0.3))
plot_seq <- c(config$N_train - config$N_train_vis, config$N_train, config$N_train + config$N_valid_vis)
plot(data$toy[plot_seq[1]:plot_seq[2]], data$p[plot_seq[1]:plot_seq[2]], type='l', col='black', lwd=2, xlim=c(data$toy[plot_seq[1]], data$toy[plot_seq[3]]), xlab="toy", ylab="Power")
lines(data$toy[(plot_seq[2]+1):plot_seq[3]], data$p[(plot_seq[2]+1):plot_seq[3]], type='l', col='blue', lwd=2)
par(mfrow = c(1, 1))
par(oma = c(4, 4, 0, 0))
par(mar = c(1, 1, 1, 1))
plot_seq <- c(config$N_train - config$N_train_vis, config$N_train, config$N_train + config$N_valid_vis)
plot(data$toy[plot_seq[1]:plot_seq[2]], data$p[plot_seq[1]:plot_seq[2]], type='l', col='black', lwd=2, xlim=c(data$toy[plot_seq[1]], data$toy[plot_seq[3]]), xlab="toy", ylab="Power")
lines(data$toy[(plot_seq[2]+1):plot_seq[3]], data$p[(plot_seq[2]+1):plot_seq[3]], type='l', col='blue', lwd=2)
par(mfrow = c(1, 1))
par(oma = c(5, 5, 0, 0))
par(mar = c(1, 1, 1, 1))
plot_seq <- c(config$N_train - config$N_train_vis, config$N_train, config$N_train + config$N_valid_vis)
plot(data$toy[plot_seq[1]:plot_seq[2]], data$p[plot_seq[1]:plot_seq[2]], type='l', col='black', lwd=2, xlim=c(data$toy[plot_seq[1]], data$toy[plot_seq[3]]), xlab="toy", ylab="Power")
lines(data$toy[(plot_seq[2]+1):plot_seq[3]], data$p[(plot_seq[2]+1):plot_seq[3]], type='l', col='blue', lwd=2)
par(mfrow = c(1, 1))
par(oma = c(6, 6, 0, 0))
par(mar = c(1, 1, 1, 1))
plot_seq <- c(config$N_train - config$N_train_vis, config$N_train, config$N_train + config$N_valid_vis)
plot(data$toy[plot_seq[1]:plot_seq[2]], data$p[plot_seq[1]:plot_seq[2]], type='l', col='black', lwd=2, xlim=c(data$toy[plot_seq[1]], data$toy[plot_seq[3]]), xlab="toy", ylab="Power")
lines(data$toy[(plot_seq[2]+1):plot_seq[3]], data$p[(plot_seq[2]+1):plot_seq[3]], type='l', col='blue', lwd=2)
# Plot end of training data
par(mfrow = c(1, 1))
par(oma = c(4, 4, 0, 0))
par(mar = c(0.3, 0.3, 0.3, 0.3))
plot_seq <- c(config$N_train - config$N_train_vis, config$N_train, config$N_train + config$N_valid_vis)
plot(data$toy[plot_seq[1]:plot_seq[2]], data$p[plot_seq[1]:plot_seq[2]], type='l', col='black', lwd=2, xlim=c(data$toy[plot_seq[1]], data$toy[plot_seq[3]]))
# Plot end of training data
source('functions\\plotting\\basic_data_plots.R')
plot_train_valid_data(data, config)
# Plot end of training data
source('functions\\plotting\\basic_data_plots.R')
plot_train_valid_data(data, config)
# Plot end of training data
source('functions\\plotting\\basic_data_plots.R')
plot_train_valid_data(data, config)
plot_train_valid_data(data, config, lwd=2, lty=5)
plot_train_valid_data(data, config, lty=2)
plot_train_valid_data(data, config, lwd=2)
plot_train_valid_data(data, config, colors=c('black', 'red'), lwd=2)
# Plot end of training data
source('functions\\plotting\\basic_data_plots.R')
plot_train_valid_data(data, config, colors=c('black', 'red'), lwd=2)
# Plot end of training data
source('functions\\plotting\\basic_data_plots.R')
plot_train_valid_data(data, config, colors=c('black', 'red'), lwd=2)
# Plot end of training data
source('functions\\plotting\\basic_data_plots.R')
plot_train_valid_data(data, config, colors=c('black', 'red'), lwd=2)
# Plot end of training data
source('functions\\plotting\\basic_data_plots.R')
plot_train_valid_data(data, config, colors=c('black', 'red'), lwd=2)
# Plot end of training data
source('functions\\plotting\\basic_data_plots.R')
plot_train_valid_data(data, config, colors=c('black', 'red'), lwd=2)
# Plot end of training data
source('functions\\plotting\\basic_data_plots.R')
plot_train_valid_data(data, config, colors=c('black', 'red'), lty=(1, 2), lwd=2)
plot_train_valid_data(data, config, colors=c('black', 'red'), lty=c(1, 2), lwd=2)
fit <- arima(data$p[1:config$N_train], order=(1, 1, 0), xreg=data[c("Ws1", "Wd1")])
fit <- arima(data$p[1:config$N_train], order=c(1, 1, 0), xreg=data[c("Ws1", "Wd1")])
fit <- arima(data$p[1:config$N_train], order=c(1, 1, 0), xreg=data[1:config$N_train, c("Ws1", "Wd1")])
preds <- predict(fit)
N
preds <- predict(fit, newxreg=data[config$N_train:dim(data)[1], c("Ws1", "Wd1")])
preds
library("naive")
setwd("C:\\Users\\CHSWA\\OneDrive - Ørsted\\DTU\\semester_1\\02427_advanced_tsa\\projects\\02427-wind-power-forecast")
# Get data and set `t` as POSIX
data <- read.csv("data/data/cex4WindDataInterpolated.csv")
config <- read.csv("config.txt")
data$t <- as.POSIXct(data$t)
# Remove nans (for now)
data <- na.omit(data)
# Get shortened data for plotting
shortenData <- function(n, data) {
index <- sample.int(dim(data)[1], n)
return(data[index,])
}
shortData <- shortenData(1000, data)
# Separate data
NEData <- shortData[which(shortData$Wd1 <= 90),]
SEData <- shortData[which(shortData$Wd1 <= 90*2 & shortData$Wd1 > 90),]
SWData <- shortData[which(shortData$Wd1 <= 90*3 & shortData$Wd1 > 90*2),]
NWData <- shortData[which(shortData$Wd1 <= 90*4 & shortData$Wd1 > 90*2),]
dirData <- list("NW"=NWData, "NE"=NEData, "SW"=SWData, "SE"=SEData)
# Plot
par(mfrow = c(2, 2))
par(oma = c(4, 4, 0, 0))
par(mar = c(0.3, 0.3, 0.3, 0.3))
for (name in names(dirData))
{
plot(dirData[[name]]$Ws1, dirData[[name]]$p, pch=20, axes=FALSE, frame.plot=TRUE)
legend("topleft", legend=name)
if (name == "NW" | name == "SW")
{
axis(2)
}
if (name == "SW" | name == "SE")
{
axis(1)
}
}
mtext("Power [kW]", side=2, outer=TRUE, line=2)
mtext("Forecasted wind speed [m/s]", side=1, outer=TRUE, line=2)
# 3d plot
library(rgl)
open3d()
points3d(shortData$Wd1, shortData$Ws1, shortData$p)
aspect3d(c(1,1,1))
axes3d()
title3d(xlab = "Direction [deg]", ylab="Forecasted wind speed [m/s]", zlab="Power [kW]")
# Kernel estimate
fit <- loess('p ~ Ws1 + Wd1', shortData, span = 0.8)
nplot <- 20
x1Seq <- seq(min(shortData$Wd1), max(shortData$Wd1), len=nplot)
y1Seq <- seq(min(shortData$Ws1), max(shortData$Ws1), len=nplot)
yprd <- outer(x1Seq, y1Seq, function(Wd1, Ws1){predict(fit, data.frame(Wd1 = Wd1, Ws1 = Ws1))})
surface3d(x1Seq, y1Seq, yprd, color="blue", alpha=0.5)
fit
# Kernel estimate
fit <- loess('p ~ Ws1 + Wd1', data, span = 0.8)
fit
summary(fit)
fit$residuals
(fit$residuals^2)
sum(fit$residuals^2)
# Plot end of training data
source('functions\\plotting\\basic_data_plots.R')
plot_train_valid_data(data, config, colors=c('black', 'red'), lty=c(1, 2), lwd=2)
fit <- arima(data$p[1:config$N_train], order=c(1, 1, 0), xreg=data[1:config$N_train, c("Ws1", "Wd1")])
preds <- predict(fit, newxreg=data[config$N_train:dim(data)[1], c("Ws1", "Wd1")])
# Plot end of training data
source('functions\\plotting\\basic_data_plots.R')
plot_train_valid_data(data, config, colors=c('black', 'red'), lty=c(1, 2), lwd=2)
# Plot end of training data
source('functions\\plotting\\basic_data_plots.R')
plot_train_valid_data(data, config, colors=c('black', 'red'), lty=c(1, 2), lwd=2)
fit <- arima(data$p[1:config$N_train], order=c(1, 1, 0), xreg=data[1:config$N_train, c("Ws1", "Wd1")])
preds <- predict(fit, newxreg=data[config$N_train:dim(data)[1], c("Ws1", "Wd1")])
plot_fit <- function(preds,
# conf_high,
# conf_low,
config,
lty=c(2, 3),
...)
{
# Plot validation
lines(data[[x]][(plot_seq[2]+1):plot_seq[3]],
preds,
lty=lty[1],
...)
# Plot conf 1
# lines(data[[x]][(plot_seq[2]+1):plot_seq[3]],
#       conf_high,
#       lty=lty[2],
#       ...).
# Plot conf 2
# lines(data[[x]][(plot_seq[2]+1):plot_seq[3]],
#       conf_low,
#       lty=lty[2],
#       ...)
}
# Plot end of training data
source('functions\\plotting\\basic_data_plots.R')
plot_train_valid_data(data, config, colors=c('black', 'red'), lty=c(1, 2), lwd=2)
fit <- arima(data$p[1:config$N_train], order=c(1, 1, 0), xreg=data[1:config$N_train, c("Ws1", "Wd1")])
preds <- predict(fit, newxreg=data[config$N_train:dim(data)[1], c("Ws1", "Wd1")])
plot_fit(preds, config)
# Plot end of training data
source('functions\\plotting\\basic_data_plots.R')
plot_train_valid_data(data, config, colors=c('black', 'red'), lty=c(1, 2), lwd=2)
fit <- arima(data$p[1:config$N_train], order=c(1, 1, 0), xreg=data[1:config$N_train, c("Ws1", "Wd1")])
preds <- predict(fit, newxreg=data[config$N_train:dim(data)[1], c("Ws1", "Wd1")])
plot_fit(preds, config)
length(preds)
preds
plot_fit(preds$pred, config)
preds$pred
length(preds$pred)
# Plot end of training data
source('functions\\plotting\\basic_data_plots.R')
plot_train_valid_data(data, config, colors=c('black', 'red'), lty=c(1, 2), lwd=2)
fit <- arima(data$p[1:config$N_train], order=c(1, 1, 0), xreg=data[1:config$N_train, c("Ws1", "Wd1")])
preds <- predict(fit, newxreg=data[config$N_train:dim(data)[1], c("Ws1", "Wd1")])
plot_fit(preds$pred, config)
# Plot end of training data
source('functions\\plotting\\basic_data_plots.R')
plot_train_valid_data(data, config, colors=c('black', 'red'), lty=c(1, 2), lwd=2)
fit <- arima(data$p[1:config$N_train], order=c(1, 1, 0), xreg=data[1:config$N_train, c("Ws1", "Wd1")])
preds <- predict(fit, newxreg=data[config$N_train:dim(data)[1], c("Ws1", "Wd1")])
plot_fit(preds$pred, config)
plot(data$p[-1])
data$p[-1]
data$p
plot(data$p[-dim(data)[1]], data$p[-1])
data(coast)
data(landings)
byx = 1
byy = 0.5
xlim <- c(-15.5,0)
ylim <- c(50.25,56)
grd <- make.grid(landings$Lon,landings$Lat,landings$LiveWeight, byx, byy, xlim, ylim)
breaks <- breaks.grid(grd,zero=FALSE)
basemap(xlim, ylim, main = "Gadoid landings")
draw.grid(grd,breaks)
draw.shape(coast, col="darkgreen")
legend.grid("topright", breaks=breaks/1000, type=2, inset=0.02, title="tonnes")
matrix(c(1,2,3,4),nrow=2)
a = matrix(c(1,2,3,4),nrow=2)
dim(a)
c(2, 2) == dim(a)
all(c(2, 2) == dim(a))
all(c(2, 2) == dim(a)) == TRUE
stopifnot(all(c(2, 2) == dim(a)))
stopifnot(all(c(2, 4) == dim(a)))
length(dim(a))
a + 1
dim(a) == c(2, 2) == c(2, 2)
list(c(1,2,3), c(1,2))
b = list(c(1,2,3), c(1,2))
b[[1]]
b[[2]]
b[1]
b[[1]]
b[[1]] == c(1,2,3)
data$Ws1 < 7
data[["row_wise_regime"]] <- rep(NA, dim(data)[1])
data[data$Ws1 < 7, "row_wise_regime"]
thresh1_name = "Wd1"
data
names(data)
thresh1_name = "Wd1"
thresh2_name = "Ws1"
thresh_values = list(c(180, 300), c(7, 15))
thresh_values[[1]][1]
data[[thresh1_name]]
thresh1_name
thresh_values[[2]][1]
which((data[[thresh1_name]] < thresh_values[[1]][1]
& data[[thresh1_name]] < thresh_values[[2]][1]))
which(data[[thresh1_name]] < thresh_values[[1]][1]
& data[[thresh1_name]] < thresh_values[[2]][1])
library(RColorBrewer)
# Init
data[["row_wise_regime"]] <- rep(1, dim(data)[1])
for (i in 2:reg_dim[1])
{
for (j in 2:reg_dim[2])
{
idx <- which(data[[thresh1_name]] > thresh_values[[1]][i]
& data[[thresh2_name]] > thresh_values[[2]][j])
data[idx, "row_wise_regime"] <- regime
regime = regime + 1
}
}
reg_dim <- c(length(thresh_values[[1]]) + 1, length(thresh_values[[2]]) + 1)
reg_dim
# Init
data[["row_wise_regime"]] <- rep(1, dim(data)[1])
for (i in 2:reg_dim[1])
{
for (j in 2:reg_dim[2])
{
idx <- which(data[[thresh1_name]] > thresh_values[[1]][i]
& data[[thresh2_name]] > thresh_values[[2]][j])
data[idx, "row_wise_regime"] <- regime
regime = regime + 1
}
}
# Init
data[["row_wise_regime"]] <- rep(1, dim(data)[1])
regime <- 2
for (i in 2:reg_dim[1])
{
for (j in 2:reg_dim[2])
{
idx <- which(data[[thresh1_name]] > thresh_values[[1]][i]
& data[[thresh2_name]] > thresh_values[[2]][j])
data[idx, "row_wise_regime"] <- regime
regime = regime + 1
}
}
plot(data$Wd1, data$Ws1, col=data$row_wise_regime)
thresh_values[[1]][i]
# Init
data[["row_wise_regime"]] <- rep(1, dim(data)[1])
regime <- 2
for (i in 1:(reg_dim[1]-1))
{
for (j in 1:(reg_dim[2]-1))
{
idx <- which(data[[thresh1_name]] > thresh_values[[1]][i]
& data[[thresh2_name]] > thresh_values[[2]][j])
data[idx, "row_wise_regime"] <- regime
regime = regime + 1
}
}
plot(data$Wd1, data$Ws1, col=data$row_wise_regime)
thresh_values[[1]][i]
thresh_values
# Init
data[["row_wise_regime"]] <- rep(1, dim(data)[1])
regime <- 2
for (i in 1:(reg_dim[1]-1))
{
for (j in 1:(reg_dim[2]-1))
{
idx <- which((data[[thresh1_name]] > thresh_values[[1]][i]
& data[[thresh2_name]] > thresh_values[[2]][j]))
data[idx, "row_wise_regime"] <- regime
regime = regime + 1
}
}
plot(data$Wd1, data$Ws1, col=data$row_wise_regime)
# Init
data[["row_wise_regime"]] <- rep(1, dim(data)[1])
regime <- 2
for (i in 1:(reg_dim[1]-1))
{
for (j in 1:(reg_dim[2]-1))
{
idx1 <- which(data[[thresh1_name]] > thresh_values[[1]][i])
idx2 <- which(data[[thresh2_name]] > thresh_values[[2]][j])
idx <- c(idx1, idx2)
data[unique(idx), "row_wise_regime"] <- regime
regime = regime + 1
}
}
plot(data$Wd1, data$Ws1, col=data$row_wise_regime)
regime
reg_dim
thresh_values
1:(reg_dim[1]-1)
# Init
data[["row_wise_regime"]] <- rep(1, dim(data)[1])
regime <- 2
t1 <- c(min(data[[thresh1_name]]), thresh_values[[1]])
t2 <- c(min(data[[thresh2_name]]), thresh_values[[2]])
for (i in 1:(reg_dim[1]-1))
{
for (j in 1:(reg_dim[2]-1))
{
idx <- which(data[[thresh1_name]] >= t1[i]
& data[[thresh1_name]] < t1[(i+1)]
& data[[thresh2_name]] >= t2[j]
& data[[thresh2_name]] < t2[(j+1)])
data[idx, "row_wise_regime"] <- regime
regime = regime + 1
}
}
create_setar_thresholds <- function(data, thresh1_name,
thresh2_name, thresh_values,
reg_dim)
{
# Init
data[["row_wise_regime"]] <- rep(1, dim(data)[1])
regime <- 2
t1 <- c(min(data[[thresh1_name]]), thresh_values[[1]])
t2 <- c(min(data[[thresh2_name]]), thresh_values[[2]])
for (i in 1:(reg_dim[1]-1))
{
for (j in 1:(reg_dim[2]-1))
{
idx <- which(data[[thresh1_name]] >= t1[i]
& data[[thresh1_name]] < t1[(i+1)]
& data[[thresh2_name]] >= t2[j]
& data[[thresh2_name]] < t2[(j+1)])
data[idx, "row_wise_regime"] <- regime
regime = regime + 1
}
}
}
))
plot(data$Wd1, data$Ws1, col=data$row_wise_regime)
ceil(0.5)
ceiling(0.7)
# Init
data[["row_wise_regime"]] <- rep(1, dim(data)[1])
regime <- 2
t1 <- c(min(data[[thresh1_name]]), thresh_values[[1]], ceiling(max(data[[thresh1_name]])))
t2 <- c(min(data[[thresh2_name]]), thresh_values[[2]], ceiling(max(data[[thresh1_name]])))
for (i in 1:reg_dim[1])
{
for (j in 1:reg_dim[2])
{
idx <- which(data[[thresh1_name]] >= t1[i]
& data[[thresh1_name]] < t1[(i+1)]
& data[[thresh2_name]] >= t2[j]
& data[[thresh2_name]] < t2[(j+1)])
data[idx, "row_wise_regime"] <- regime
regime = regime + 1
}
}
plot(data$Wd1, data$Ws1, col=data$row_wise_regime)
plot(data$p[-dim(data)[1]], data$p[-1], col=data$row_wise_regime)
plot(data$Wd1, data$Ws1, col=data$row_wise_regime)
plot(data$Wd1, data$Ws1, col=data$row_wise_regime, pch=3)
plot(data$Ws1, data$p, col=data$row_wise_regime, pch=data$Wd1)
plot(data$Ws1, data$p, col=data$row_wise_regime)
create_setar_thresholds <- function(data, thresh1_name,
thresh2_name, thresh_values,
reg_dim)
{
# Init
data[["row_wise_regime"]] <- rep(1, dim(data)[1])
regime <- 2
# Extend threshold values
t1 <- c(min(data[[thresh1_name]]),
thresh_values[[1]],
ceiling(max(data[[thresh1_name]])))
t2 <- c(min(data[[thresh2_name]]),
thresh_values[[2]],
ceiling(max(data[[thresh1_name]])))
# Make regimes
for (i in 1:reg_dim[1])
{
for (j in 1:reg_dim[2])
{
idx <- which(data[[thresh1_name]] >= t1[i]
& data[[thresh1_name]] < t1[(i+1)]
& data[[thresh2_name]] >= t2[j]
& data[[thresh2_name]] < t2[(j+1)])
data[idx, "row_wise_regime"] <- regime
regime = regime + 1
}
}
return(list(data, matrix(c(1:regimes), nrow=reg_dim[1])))
}
c(1, 2, 3)
c(1, 2, 3)^2
