<<<<<<< HEAD
install.packages("fable")
library(fable)
?fable
library(tibble)
library(tsibble)
library(dplyr)
config <- read.csv('config.txt')
rm(list=ls())
setwd("/Volumes/GoogleDrive/Mit drev/Matematisk modellering/9. semester/Adv. Time Series/exercises/02427-wind-power-forecast")
source('functions/plotting/diagnostic_plots.R')
library(fable)
library(tsibble)
library(dplyr)
config <- read.csv('config.txt')
data <- read.csv('data/data/cex4WindDataInterpolated12Hours.csv')
View(data)
library(tidyverse)
install.packages("tidyverse")
library(fable)
library(tidyverse)
library(tsibble)
library(dplyr)
data <- read.csv('data/data/cex4WindDataInterpolated12Hours.csv')
tsibble(data)
as_tsibble(data, index = )
as_tsibble(data)
as_tsibble(data, index = t)
View(data)
as_tsibble(data, index = toy)
duplicates(data$toy)
data$toy
data$toy[1000:2000]
data$toy[2000:3000]
data$toy[3000:4000]
data$toy[10000:11000]
data['t']
time_train <- as.character(data[['t']])
time_train <- as.POSIXct(time_train, format = "%Y-%m-%d %H:%M:%S", tz="GMT")
year(time_train)
library(lubridate)
mutate(data, date = ymd(t), day = day(date),
month = month(date), year = year(date))
ymd(time_train)
time_train
extractdate <- function(date) {
day <- format(date, format="%d")
month <- format(date, format="%m")
year <- format(date, format="%Y")
cbind(day, month, year)
}
extractdate(time_train)
year <- format(time_train, format="%Y")
year
year <- as.numeric(format(time_train, format="%Y"))
year
data[['toy']] <- year + data[['toy']]
data[['toy']]
data <- read.csv('data/data/cex4WindDataInterpolated12Hours.csv')
time_train <- as.character(train[['t']])
time_train <- as.POSIXct(time_train, format = "%Y-%m-%d %H:%M:%S", tz="GMT")
year <- as.numeric(format(time_train, format="%Y"))
data <- read.csv('data/data/cex4WindDataInterpolated12Hours.csv')
time_train <- as.character(data[['t']])
time_train <- as.POSIXct(time_train, format = "%Y-%m-%d %H:%M:%S", tz="GMT")
year <- as.numeric(format(time_train, format="%Y"))
data[['toy']]
max(data[['toy']])
data[['toy']] <- year + data[['toy']]/366
data[['toy']]
as_tsibble(data, index = toy)
data.tibble = as_tsibble(data, index = toy)
install.packages('thief')
library(thief)
library(xts)
library(thief)
names <- c('p', 'Ws1', 'Ws2', 'Ws3', 'Ws4', 'Ws5', 'Ws6', 'Ws7', 'Ws8',
'Ws9', 'Ws10', 'Ws11', 'Ws12')
train.xts <- na.omit(xts(x = data[names], order.by = time_train))
tsaggregates(train.xts$p)
train.xts$p
frequency(train.xts)
train.xts <- xts(x = data[names], order.by = time_train)
tsaggregates(train.xts$p)
tsaggregates(train.xts$p, frequency = 0.0002777778)
tsaggregates(train.xts$p, m = 0.0002777778)
length(train.xts$p)
?aggregate
?msts
train.xts <- msts(x = data$p, seasonal.periods = c(1, 3, 6, 12))
train.xts <- msts(data = data$p, seasonal.periods = c(1, 3, 6, 12))
train.xts
tsaggregates(train.xts$p)
tsaggregates(train.xts)
agg <- tsaggregates(train.xts)
View(agg)
which(is.na(agg$Monthly))
data.tibble = as.tsbibble(agg)
data.tibble = as.tsibble(agg)
data.tibble = as_tsibble(agg)
agg$`2-Monthly`
length(agg$`2-Monthly`)
length(agg$Monthly)
length(agg$Quarterly)
37932/3
length(agg$Biannual)
length(agg$Annual)
plot(agg$Annual)
plot(agg$Biannual)
plot(agg$Annual)
plot(agg$Annual[0:100])
plot(agg$Annual[0:100], type ='l')
fit_biannual <- arima(agg$Biannual, order = c(1,0,0))
fit_biannual
acf(agg$Biannual)
acf(agg$Biannual, na.action = na.omit)
acf(na.omit(agg$Biannual), na.action = na.omit)
?acf
acf(agg$Biannual, na.action = na.pass)
pacf(agg$Biannual, na.action = na.pass)
fit_biannual <- arima(agg$Biannual, order = c(2,1,0))
fit_biannual
plot(diff(agg$Biannual))
fit_biannual <- auto.arima(agg$Biannual)
fit_biannual
acf(fit_biannual$residuals, na.action = na.pass)
pacf(fit_biannual$residuals, na.action = na.pass)
fit_biannual <- auto.arima(diff(agg$Biannual))
fit_biannual
pacf(fit_biannual$residuals, na.action = na.pass)
acf(fit_biannual$residuals, na.action = na.pass)
pacf(fit_biannual$residuals, na.action = na.pass)
fit_biannual <- auto.arima(agg$Biannual)
pacf(fit_biannual$residuals, na.action = na.pass)
acf(fit_biannual$residuals, na.action = na.pass)
plot(agg$Quarterly)
plot(diff(agg$Quarterly))
plot(agg$Quarterly)
fit_biannual <- auto.arima(agg$Quarterly)
acf(fit_biannual$residuals, na.action = na.pass)
pacf(fit_biannual$residuals, na.action = na.pass)
fit_biannual
fit_biannual <- auto.arima(agg$Monthly)
fit_biannual
ftbats <- function(y,h,...){forecast(tbats(y),h,...)}
z <- thief(train.xts, forecastfunction=ftbats)
z
z <- thief(train.xts, usemodel = 'arima')
z
plot(z)
z$x
z$method
z$residuals
length(z)
length(z$residuals)
length(train.xts)
length(data$p)
dim(z)
dim(z$residuals)
dim(z$residuals[,1])
dim(z$residuals[1,])
View(z$residuals)
plot(z$residuals)
mean(z$residuals^2)
mean(z$residuals^2, na.rm = TRUE)
z$fitted
z$fitted['Jan']
View(z$fitted)
train.xts <- msts(data = data$p, seasonal.periods = c(1, 3, 6, 12))
agg <- tsaggregates(train.xts)
dim(agg)
View(agg)
View(z)
seq_along(agg)
frequency(agg[[1]])
frequency(agg[[2]])
frequency(agg[[3]])
frequency(agg[[4]])
frequency(agg[[5]])
frequency(agg[[6]])
fc <- list()
for(i in seq_along(agg))
fc[[i]] <- forecast(auto.arima(agg[[i]]), h=2*frequency(agg[[i]]))
train.xts[25000::]
agg <- tsaggregates(train.xts[25000:nrow])
(train.xts)
agg <- tsaggregates(train.xts[25000:nrow(train.xts)])
agg <- tsaggregates(train.xts[25000:length(train.xts)])
agg
fc <- list()
for(i in seq_along(agg))
fc[[i]] <- forecast(auto.arima(agg[[i]]), h=2*frequency(agg[[i]]))
View(fc)
seq_along(agg)
agg <- tsaggregates(train.xts[25000:length(train.xts)])
agg$`Period 1`
train.xts <- msts(data = data$p[25000:length(data$p)], seasonal.periods = c(1, 3, 6, 12))
agg <- tsaggregates(train.xts)
agg
seq_along(agg)
agg[[1]]
agg <- agg[c(1, 3, 5, 6)]
seq_along(agg)
# Compute forecasts
fc <- list()
for(i in seq_along(agg))
fc[[i]] <- forecast(auto.arima(agg[[i]]), h=2*frequency(agg[[i]]))
train.xts <- msts(data = data$p[30000:length(data$p)], seasonal.periods = c(1, 3, 6, 12))
length(train.xts)
agg <- tsaggregates(train.xts)
agg$Annual
length(agg$Annual)
length(agg$Biannual)
length(agg$Monthly)
agg <- agg[c(1, 3, 5, 6)]
# Compute forecasts
fc <- list()
for(i in seq_along(agg))
fc[[i]] <- forecast(auto.arima(agg[[i]]), h=2*frequency(agg[[i]]))
View(fc)
length(fc)
fc[1]
length(fc[[1]])
fc[[1]]$fitted
length(fc[[1]]$fitted)
length(train.xts)
fc[[1]]$mean
View(fc)
fc[[1]][["level"]]
fc[[1]]$fitted
length(fc1[['fitted']])
length(fc[[1]][['fitted']])
View(fc)
View(fc[[1]])
train.xts <- msts(data = data$p[30000:length(data$p)], seasonal.periods = c(1, 3, 6, 12))
agg <- tsaggregates(train.xts)
agg <- agg[c(1, 3, 5, 6)]
fit_biannual <- auto.arima(agg$Annual)
fit_biannual
train.xts <- msts(data = data$p[30001:length(data$p)], seasonal.periods = c(1, 3, 6, 12))
agg <- tsaggregates(train.xts)
agg <- agg[c(1, 3, 5, 6)]
fit_biannual <- auto.arima(agg$Annual)
fit_biannual
train.xts <- msts(data = data$p[3006:length(data$p)], seasonal.periods = c(1, 3, 6, 12))
agg <- tsaggregates(train.xts)
agg <- tsaggregates(train.xts)
agg <- agg[c(1, 3, 5, 6)]
fit_biannual <- auto.arima(agg$Annual)
fit_biannual
fit_biannual <- arima(agg$Annual, order = (2,0,1))
fit_biannual <- arima(agg$Annual, order = c(2,0,1))
fit_biannual
fit_biannual <- arima(agg$Annual, order = c(1,0,0))
fit_biannual
fit_biannual <- arima(agg$Annual, order = c(2,0,0))
fit_biannual
train.xts <- msts(data = data$p[3000:length(data$p)], seasonal.periods = c(1, 3, 6, 12))
agg <- tsaggregates(train.xts)
agg <- agg[c(1, 3, 5, 6)]
fit_biannual <- arima(agg$Annual, order = c(2,0,0))
fit_biannual
train.xts <- msts(data = data$p[3000:length(data$p)], seasonal.periods = c(1, 3, 6, 12))
agg <- tsaggregates(train.xts)
agg <- agg[c(1, 3, 5, 6)]
fit_biannual <- arima(agg$Annual, order = c(2,0,0))
fit_biannual
train.xts <- msts(data = data$p[3000:length(data$p)], seasonal.periods = c(1, 3, 6, 12))
agg <- tsaggregates(train.xts)
agg <- agg[c(1, 3, 5, 6)]
length(agg$Monthly)
train.xts <- msts(data = data$p[30010:length(data$p)], seasonal.periods = c(1, 3, 6, 12))
agg <- tsaggregates(train.xts)
agg <- agg[c(1, 3, 5, 6)]
length(agg$Monthly)
train.xts <- msts(data = data$p[30000:length(data$p)], seasonal.periods = c(1, 3, 6, 12))
agg <- tsaggregates(train.xts)
agg <- agg[c(1, 3, 5, 6)]
length(agg$Monthly)
agg$Quarterly
agg$Quarterly[0:10]
train.xts <- msts(data = data$p[30010:length(data$p)], seasonal.periods = c(1, 3, 6, 12))
agg <- tsaggregates(train.xts)
agg <- agg[c(1, 3, 5, 6)]
agg$Quarterly[0:10]
fit_biannual <- arima(agg$Annual, order = c(2,0,0))
fit_biannual
train.xts <- msts(data = data$p[30000:length(data$p)], seasonal.periods = c(1, 3, 6, 12))
fit_biannual <- arima(agg$Annual, order = c(2,0,0))
fit_biannual
fit_biannual$n.cond
fit_biannual$nobs
train.xts <- msts(data = data$p[30010:length(data$p)], seasonal.periods = c(1, 3, 6, 12))
agg <- tsaggregates(train.xts)
agg <- agg[c(1, 3, 5, 6)]
fit_biannual <- arima(agg$Annual, order = c(2,0,0))
fit_biannual$nobs
length(agg$Annual)
train.xts <- msts(data = data$p[30000:length(data$p)], seasonal.periods = c(1, 3, 6, 12))
agg <- tsaggregates(train.xts)
length(agg$Annual)
agg <- tsaggregates(train.xts)
agg <- agg[c(1, 3, 5, 6)]
fit_biannual <- arima(agg$Annual, order = c(2,0,0))
fit_biannual
train.xts <- msts(data = data$p[30010:length(data$p)], seasonal.periods = c(1, 3, 6, 12))
agg <- tsaggregates(train.xts)
agg <- agg[c(1, 3, 5, 6)]
fit_biannual <- arima(agg$Annual, order = c(2,0,0))
fit_biannual
train.xts <- msts(data = data$p[30005:length(data$p)], seasonal.periods = c(1, 3, 6, 12))
agg <- tsaggregates(train.xts)
agg <- agg[c(1, 3, 5, 6)]
fit_biannual <- arima(agg$Annual, order = c(2,0,0))
fit_biannual
train.xts <- msts(data = data$p[30005:length(data$p)], seasonal.periods = c(1, 3, 6, 12))
agg <- tsaggregates(train.xts)
agg <- agg[c(1, 3, 5, 6)]
pacf(agg$Biannual, na.action = na.pass)
fit_biannual <- arima(agg$Annual, order = c(2,0,0))
fit_biannual
train.xts <- msts(data = data$p[30002:length(data$p)], seasonal.periods = c(1, 3, 6, 12))
agg <- tsaggregates(train.xts)
agg <- agg[c(1, 3, 5, 6)]
pacf(agg$Biannual, na.action = na.pass)
fit_biannual <- arima(agg$Annual, order = c(2,0,0))
fit_biannual
data <- read.csv('data/data/cex4WindDataInterpolated12Hours.csv')
time_train <- as.character(data[['t']])
time_train <- as.POSIXct(time_train, format = "%Y-%m-%d %H:%M:%S", tz="GMT")
names <- c('p', 'Ws1', 'Ws2', 'Ws3', 'Ws4', 'Ws5', 'Ws6', 'Ws7', 'Ws8',
'Ws9', 'Ws10', 'Ws11', 'Ws12')
train <- data[, names]
val <- data[(length(data[['p']])-config$N_valid-1):length(data[['p']]),names]
train.xts <- msts(data = train, seasonal.periods = c(1, 3, 6, 12))
#hourly forecasts
hourly.fit <- (arima(train.xts['p'], order = c(2,0,2), xreg = train.xts[c('Ws1')]))
#hourly forecasts
hourly.fit <- (arima(train.xts['p'], order = c(2,0,2), xreg = train.xts['Ws1']))
train.xts['Ws1']
train.xts <- msts(data = train, seasonal.periods = c(1, 3, 6, 12))
train.xts
#hourly forecasts
hourly.fit <- (arima(train.xts$p, order = c(2,0,2), xreg = train.xts$Ws1))
train.xts$p
train.xts['p']
train.xts[['p']]
#hourly forecasts
hourly.fit <- (arima(train$p, order = c(2,0,2), xreg = train$Ws1))
hourly.fit
#hourly forecasts
hourly.fit <- (auto.arima(train$p, xreg = train$Ws1))
train <- data[1:config$N_train, names]
#hourly forecasts
hourly.fit <- (auto.arima(train$p, xreg = train$Ws1))
hourly.fit
#hourly forecasts
hourly.fit <- arima(train$p, order = c(2,0,2), xreg = train$Ws1)
hourly.fit
#hourly forecasts
hourly.fit <- arima(train$p, order = c(1,0,1), xreg = train$Ws1)
hourly.fit
acf(hourly.fit$residuals, na.action = na.pass)
pacf(hourly.fit$residuals, na.action = na.pass)
#hourly forecasts
hourly.fit <- arima(train$p, order = c(2,0,1), xreg = train$Ws1)
acf(hourly.fit$residuals, na.action = na.pass)
pacf(hourly.fit$residuals, na.action = na.pass)
acf(hourly.fit$residuals, na.action = na.pass)
#hourly forecasts
hourly.fit <- arima(train$p, order = c(2,0,2), xreg = train$Ws1)
acf(hourly.fit$residuals, na.action = na.pass)
pacf(hourly.fit$residuals, na.action = na.pass)
agg <- tsaggregates(train.xts)
agg3.fit <- auto.arima(agg$Quarterly)
agg3.fit
acf(agg3.fit$residuals, na.action = na.pass)
pacf(agg3.fit$residuals, na.action = na.pass)
agg3.fit <- arima(agg$Quarterly, order = c(2,0,0),
seasonal = list(order = c(1,0,0), period = 4))
agg3.fit
acf(agg3.fit$residuals, na.action = na.pass)
pacf(agg3.fit$residuals, na.action = na.pass)
acf(agg3.fit$residuals, na.action = na.pass)
agg3.fit <- arima(agg$Quarterly, order = c(2,0,2),
seasonal = list(order = c(1,0,0), period = 4))
acf(agg3.fit$residuals, na.action = na.pass)
pacf(agg3.fit$residuals, na.action = na.pass)
acf(agg3.fit$residuals, na.action = na.pass)
agg3.fit <- arima(agg$Quarterly, order = c(2,0,0),
seasonal = list(order = c(2,0,0), period = 4))
acf(agg3.fit$residuals, na.action = na.pass)
pacf(agg3.fit$residuals, na.action = na.pass)
agg3.fit <- arima(agg$Quarterly, order = c(2,1,0),
seasonal = list(order = c(2,0,0), period = 4))
acf(agg3.fit$residuals, na.action = na.pass)
pacf(agg3.fit$residuals, na.action = na.pass)
agg3.fit <- arima(agg$Quarterly, order = c(2,0,0),
seasonal = list(order = c(2,1,0), period = 4))
acf(agg3.fit$residuals, na.action = na.pass)
pacf(agg3.fit$residuals, na.action = na.pass)
acf(agg3.fit$residuals, na.action = na.pass)
agg3.fit <- arima(agg$Quarterly, order = c(2,0,0),
seasonal = list(order = c(2,0,0), period = 4))
agg3.fit <- auto.arima(agg$Quarterly)
agg6.fit <- auto.arima(agg$Biannual)
agg12.fit <- auto.arima(agg$Annual)
agg3.fit
acf(agg3.fit$residuals, na.action = na.pass)
pacf(agg3.fit$residuals, na.action = na.pass)
acf(agg6.fit$residuals, na.action = na.pass)
pacf(agg6.fit$residuals, na.action = na.pass)
agg6.fit
acf(agg12.fit$residuals, na.action = na.pass)
pacf(agg12.fit$residuals, na.action = na.pass)
agg12
agg12.fit
#hourly forecasts
hourly.fit <- arima(log(train$p), order = c(2,0,0), xreg = train$Ws1)
log(train$p)
?log
train$p
?tbats
agg3.fit <- tbats(agg$Quarterly)
agg3.fit
acf(agg3.fit$errors, na.action = na.pass)
pacf(agg3.fit$errors, na.action = na.pass)
#hourly forecasts
hourly.fit <- tbats(train$p, order = c(2,0,0), xreg = train$Ws1)
#hourly forecasts
hourly.fit <- tbats(train$p, xreg = train$Ws1)
hourly.fit
?tbats
#hourly forecasts
hourly.fit <- tbats(train$p)
hourly.fit
acf(hourly.fit$errors, na.action = na.pass)
pacf(hourly.fit$errors, na.action = na.pass)
mean(hourly.fit$erros^2, na.rm =TRUE)
mean(hourly.fit$errors^2, na.rm =TRUE)
hourly.fit <- arima(train$p, order = c(2,0,2), xreg = train$Ws1)
mean(hourly.fit$residuals^2, na.rm = TRUE)
hourly.fit <- auto.arima(train$p, order = c(2,0,2), xreg = train$Ws1)
hourly.fit <- auto.arima(train$p, xreg = train$Ws1)
mean(hourly.fit$residuals^2, na.rm=TRUE)
hourly.fit.ets <- ets(train$p)
hourly.fit.ets
acf(hourly.fit.ets, na.rm=TRUE)
acf(hourly.fit.ets$residuals, na.rm=TRUE)
pacf(hourly.fit.ets$residuals, na.rm=TRUE)
mean(hourly.fit.ets$residuals^2, na.rm =TRUE)
=======
plot(data$toy[plot_seq[1]:plot_seq[2]], data$p[plot_seq[1]:plot_seq[2]], type='l', col='black', lwd=2, xlim=data$toy[plot_seq[1]:plot_seq[3]])
plot(data$toy[plot_seq[1]:plot_seq[2]], data$p[plot_seq[1]:plot_seq[2]], type='l', col='black', lwd=2, xlim=c(data$toy[plot_seq[1]], data$toy[plot_seq[3]])
plot(data$toy[plot_seq[1]:plot_seq[2]], data$p[plot_seq[1]:plot_seq[2]], type='l', col='black', lwd=2, xlim=c(data$toy[plot_seq[1]], data$toy[plot_seq[3]]))
plot(data$toy[plot_seq[1]:plot_seq[2]], data$p[plot_seq[1]:plot_seq[2]], type='l', col='black', lwd=2, xlim=c(data$toy[plot_seq[1]], data$toy[plot_seq[3]]))
lines(data$toy[(plot_seq[2]+1):plot_seq[3]], data$p[(plot_seq[2]+1):plot_seq[3]], type='l', col='blue', lwd=2)
config <- read.csv("config.txt")
# Plot end of training data
plot_seq <- c(config$N_train - config$N_train_vis, config$N_train, config$N_train + config$N_valid_vis)
plot(data$toy[plot_seq[1]:plot_seq[2]], data$p[plot_seq[1]:plot_seq[2]], type='l', col='black', lwd=2, xlim=c(data$toy[plot_seq[1]], data$toy[plot_seq[3]]))
lines(data$toy[(plot_seq[2]+1):plot_seq[3]], data$p[(plot_seq[2]+1):plot_seq[3]], type='l', col='blue', lwd=2)
setwd("C:\\Users\\CHSWA\\OneDrive - Ørsted\\DTU\\semester_1\\02427_advanced_tsa\\projects\\02427-wind-power-forecast")
# Get data and set `t` as POSIX
data <- read.csv("data/data/cex4WindDataInterpolated.csv")
config <- read.csv("config.txt")
data$t <- as.POSIXct(data$t)
# Remove nans (for now)
data <- na.omit(data)
# Get shortened data for plotting
shortenData <- function(n, data) {
index <- sample.int(dim(data)[1], n)
return(data[index,])
}
shortData <- shortenData(1000, data)
# Separate data
NEData <- shortData[which(shortData$Wd1 <= 90),]
SEData <- shortData[which(shortData$Wd1 <= 90*2 & shortData$Wd1 > 90),]
SWData <- shortData[which(shortData$Wd1 <= 90*3 & shortData$Wd1 > 90*2),]
NWData <- shortData[which(shortData$Wd1 <= 90*4 & shortData$Wd1 > 90*2),]
dirData <- list("NW"=NWData, "NE"=NEData, "SW"=SWData, "SE"=SEData)
# Plot
par(mfrow = c(2, 2))
par(oma = c(4, 4, 0, 0))
par(mar = c(0.3, 0.3, 0.3, 0.3))
for (name in names(dirData))
{
plot(dirData[[name]]$Ws1, dirData[[name]]$p, pch=20, axes=FALSE, frame.plot=TRUE)
legend("topleft", legend=name)
if (name == "NW" | name == "SW")
{
axis(2)
}
if (name == "SW" | name == "SE")
{
axis(1)
}
}
mtext("Power [kW]", side=2, outer=TRUE, line=2)
mtext("Forecasted wind speed [m/s]", side=1, outer=TRUE, line=2)
# 3d plot
library(rgl)
open3d()
points3d(shortData$Wd1, shortData$Ws1, shortData$p)
aspect3d(c(1,1,1))
axes3d()
title3d(xlab = "Direction [deg]", ylab="Forecasted wind speed [m/s]", zlab="Power [kW]")
# Kernel estimate
fit <- loess('p ~ Ws1 + Wd1', shortData, span = 0.8)
nplot <- 20
x1Seq <- seq(min(shortData$Wd1), max(shortData$Wd1), len=nplot)
y1Seq <- seq(min(shortData$Ws1), max(shortData$Ws1), len=nplot)
yprd <- outer(x1Seq, y1Seq, function(Wd1, Ws1){predict(fit, data.frame(Wd1 = Wd1, Ws1 = Ws1))})
surface3d(x1Seq, y1Seq, yprd, color="blue", alpha=0.5)
# Plot end of training data
plot_seq <- c(config$N_train - config$N_train_vis, config$N_train, config$N_train + config$N_valid_vis)
plot(data$toy[plot_seq[1]:plot_seq[2]], data$p[plot_seq[1]:plot_seq[2]], type='l', col='black', lwd=2, xlim=c(data$toy[plot_seq[1]], data$toy[plot_seq[3]]))
lines(data$toy[(plot_seq[2]+1):plot_seq[3]], data$p[(plot_seq[2]+1):plot_seq[3]], type='l', col='blue', lwd=2)
par(mfrow = c(1, 1))
par(oma = c(4, 4, 0, 0))
par(mar = c(0.3, 0.3, 0.3, 0.3))
plot_seq <- c(config$N_train - config$N_train_vis, config$N_train, config$N_train + config$N_valid_vis)
plot(data$toy[plot_seq[1]:plot_seq[2]], data$p[plot_seq[1]:plot_seq[2]], type='l', col='black', lwd=2, xlim=c(data$toy[plot_seq[1]], data$toy[plot_seq[3]]))
lines(data$toy[(plot_seq[2]+1):plot_seq[3]], data$p[(plot_seq[2]+1):plot_seq[3]], type='l', col='blue', lwd=2)
par(mfrow = c(1, 1))
par(oma = c(4, 4, 0, 0))
par(mar = c(0.3, 0.3, 0.3, 0.3))
plot_seq <- c(config$N_train - config$N_train_vis, config$N_train, config$N_train + config$N_valid_vis)
plot(data$toy[plot_seq[1]:plot_seq[2]], data$p[plot_seq[1]:plot_seq[2]], type='l', col='black', lwd=2, xlim=c(data$toy[plot_seq[1]], data$toy[plot_seq[3]]), xlab="toy", ylab="Power")
lines(data$toy[(plot_seq[2]+1):plot_seq[3]], data$p[(plot_seq[2]+1):plot_seq[3]], type='l', col='blue', lwd=2)
par(mfrow = c(1, 1))
par(oma = c(4, 4, 0, 0))
par(mar = c(0.3, 0.3, 0.3, 0.3))
plot_seq <- c(config$N_train - config$N_train_vis, config$N_train, config$N_train + config$N_valid_vis)
plot(data$toy[plot_seq[1]:plot_seq[2]], data$p[plot_seq[1]:plot_seq[2]], type='l', col='black', lwd=2, xlim=c(data$toy[plot_seq[1]], data$toy[plot_seq[3]]), xlab="toy", ylab="Power")
lines(data$toy[(plot_seq[2]+1):plot_seq[3]], data$p[(plot_seq[2]+1):plot_seq[3]], type='l', col='blue', lwd=2)
par(mfrow = c(1, 1))
par(oma = c(4, 4, 0, 0))
par(mar = c(1, 1, 1, 1))
plot_seq <- c(config$N_train - config$N_train_vis, config$N_train, config$N_train + config$N_valid_vis)
plot(data$toy[plot_seq[1]:plot_seq[2]], data$p[plot_seq[1]:plot_seq[2]], type='l', col='black', lwd=2, xlim=c(data$toy[plot_seq[1]], data$toy[plot_seq[3]]), xlab="toy", ylab="Power")
lines(data$toy[(plot_seq[2]+1):plot_seq[3]], data$p[(plot_seq[2]+1):plot_seq[3]], type='l', col='blue', lwd=2)
par(mfrow = c(1, 1))
par(oma = c(5, 5, 0, 0))
par(mar = c(1, 1, 1, 1))
plot_seq <- c(config$N_train - config$N_train_vis, config$N_train, config$N_train + config$N_valid_vis)
plot(data$toy[plot_seq[1]:plot_seq[2]], data$p[plot_seq[1]:plot_seq[2]], type='l', col='black', lwd=2, xlim=c(data$toy[plot_seq[1]], data$toy[plot_seq[3]]), xlab="toy", ylab="Power")
lines(data$toy[(plot_seq[2]+1):plot_seq[3]], data$p[(plot_seq[2]+1):plot_seq[3]], type='l', col='blue', lwd=2)
par(mfrow = c(1, 1))
par(oma = c(6, 6, 0, 0))
par(mar = c(1, 1, 1, 1))
plot_seq <- c(config$N_train - config$N_train_vis, config$N_train, config$N_train + config$N_valid_vis)
plot(data$toy[plot_seq[1]:plot_seq[2]], data$p[plot_seq[1]:plot_seq[2]], type='l', col='black', lwd=2, xlim=c(data$toy[plot_seq[1]], data$toy[plot_seq[3]]), xlab="toy", ylab="Power")
lines(data$toy[(plot_seq[2]+1):plot_seq[3]], data$p[(plot_seq[2]+1):plot_seq[3]], type='l', col='blue', lwd=2)
# Plot end of training data
par(mfrow = c(1, 1))
par(oma = c(4, 4, 0, 0))
par(mar = c(0.3, 0.3, 0.3, 0.3))
plot_seq <- c(config$N_train - config$N_train_vis, config$N_train, config$N_train + config$N_valid_vis)
plot(data$toy[plot_seq[1]:plot_seq[2]], data$p[plot_seq[1]:plot_seq[2]], type='l', col='black', lwd=2, xlim=c(data$toy[plot_seq[1]], data$toy[plot_seq[3]]))
# Plot end of training data
source('functions\\plotting\\basic_data_plots.R')
plot_train_valid_data(data, config)
# Plot end of training data
source('functions\\plotting\\basic_data_plots.R')
plot_train_valid_data(data, config)
# Plot end of training data
source('functions\\plotting\\basic_data_plots.R')
plot_train_valid_data(data, config)
plot_train_valid_data(data, config, lwd=2, lty=5)
plot_train_valid_data(data, config, lty=2)
plot_train_valid_data(data, config, lwd=2)
plot_train_valid_data(data, config, colors=c('black', 'red'), lwd=2)
# Plot end of training data
source('functions\\plotting\\basic_data_plots.R')
plot_train_valid_data(data, config, colors=c('black', 'red'), lwd=2)
# Plot end of training data
source('functions\\plotting\\basic_data_plots.R')
plot_train_valid_data(data, config, colors=c('black', 'red'), lwd=2)
# Plot end of training data
source('functions\\plotting\\basic_data_plots.R')
plot_train_valid_data(data, config, colors=c('black', 'red'), lwd=2)
# Plot end of training data
source('functions\\plotting\\basic_data_plots.R')
plot_train_valid_data(data, config, colors=c('black', 'red'), lwd=2)
# Plot end of training data
source('functions\\plotting\\basic_data_plots.R')
plot_train_valid_data(data, config, colors=c('black', 'red'), lwd=2)
# Plot end of training data
source('functions\\plotting\\basic_data_plots.R')
plot_train_valid_data(data, config, colors=c('black', 'red'), lty=(1, 2), lwd=2)
plot_train_valid_data(data, config, colors=c('black', 'red'), lty=c(1, 2), lwd=2)
fit <- arima(data$p[1:config$N_train], order=(1, 1, 0), xreg=data[c("Ws1", "Wd1")])
fit <- arima(data$p[1:config$N_train], order=c(1, 1, 0), xreg=data[c("Ws1", "Wd1")])
fit <- arima(data$p[1:config$N_train], order=c(1, 1, 0), xreg=data[1:config$N_train, c("Ws1", "Wd1")])
preds <- predict(fit)
N
preds <- predict(fit, newxreg=data[config$N_train:dim(data)[1], c("Ws1", "Wd1")])
preds
library("naive")
setwd("C:\\Users\\CHSWA\\OneDrive - Ørsted\\DTU\\semester_1\\02427_advanced_tsa\\projects\\02427-wind-power-forecast")
# Get data and set `t` as POSIX
data <- read.csv("data/data/cex4WindDataInterpolated.csv")
config <- read.csv("config.txt")
data$t <- as.POSIXct(data$t)
# Remove nans (for now)
data <- na.omit(data)
# Get shortened data for plotting
shortenData <- function(n, data) {
index <- sample.int(dim(data)[1], n)
return(data[index,])
}
shortData <- shortenData(1000, data)
# Separate data
NEData <- shortData[which(shortData$Wd1 <= 90),]
SEData <- shortData[which(shortData$Wd1 <= 90*2 & shortData$Wd1 > 90),]
SWData <- shortData[which(shortData$Wd1 <= 90*3 & shortData$Wd1 > 90*2),]
NWData <- shortData[which(shortData$Wd1 <= 90*4 & shortData$Wd1 > 90*2),]
dirData <- list("NW"=NWData, "NE"=NEData, "SW"=SWData, "SE"=SEData)
# Plot
par(mfrow = c(2, 2))
par(oma = c(4, 4, 0, 0))
par(mar = c(0.3, 0.3, 0.3, 0.3))
for (name in names(dirData))
{
plot(dirData[[name]]$Ws1, dirData[[name]]$p, pch=20, axes=FALSE, frame.plot=TRUE)
legend("topleft", legend=name)
if (name == "NW" | name == "SW")
{
axis(2)
}
if (name == "SW" | name == "SE")
{
axis(1)
}
}
mtext("Power [kW]", side=2, outer=TRUE, line=2)
mtext("Forecasted wind speed [m/s]", side=1, outer=TRUE, line=2)
# 3d plot
library(rgl)
open3d()
points3d(shortData$Wd1, shortData$Ws1, shortData$p)
aspect3d(c(1,1,1))
axes3d()
title3d(xlab = "Direction [deg]", ylab="Forecasted wind speed [m/s]", zlab="Power [kW]")
# Kernel estimate
fit <- loess('p ~ Ws1 + Wd1', shortData, span = 0.8)
nplot <- 20
x1Seq <- seq(min(shortData$Wd1), max(shortData$Wd1), len=nplot)
y1Seq <- seq(min(shortData$Ws1), max(shortData$Ws1), len=nplot)
yprd <- outer(x1Seq, y1Seq, function(Wd1, Ws1){predict(fit, data.frame(Wd1 = Wd1, Ws1 = Ws1))})
surface3d(x1Seq, y1Seq, yprd, color="blue", alpha=0.5)
fit
# Kernel estimate
fit <- loess('p ~ Ws1 + Wd1', data, span = 0.8)
fit
summary(fit)
fit$residuals
(fit$residuals^2)
sum(fit$residuals^2)
# Plot end of training data
source('functions\\plotting\\basic_data_plots.R')
plot_train_valid_data(data, config, colors=c('black', 'red'), lty=c(1, 2), lwd=2)
fit <- arima(data$p[1:config$N_train], order=c(1, 1, 0), xreg=data[1:config$N_train, c("Ws1", "Wd1")])
preds <- predict(fit, newxreg=data[config$N_train:dim(data)[1], c("Ws1", "Wd1")])
# Plot end of training data
source('functions\\plotting\\basic_data_plots.R')
plot_train_valid_data(data, config, colors=c('black', 'red'), lty=c(1, 2), lwd=2)
# Plot end of training data
source('functions\\plotting\\basic_data_plots.R')
plot_train_valid_data(data, config, colors=c('black', 'red'), lty=c(1, 2), lwd=2)
fit <- arima(data$p[1:config$N_train], order=c(1, 1, 0), xreg=data[1:config$N_train, c("Ws1", "Wd1")])
preds <- predict(fit, newxreg=data[config$N_train:dim(data)[1], c("Ws1", "Wd1")])
plot_fit <- function(preds,
# conf_high,
# conf_low,
config,
lty=c(2, 3),
...)
{
# Plot validation
lines(data[[x]][(plot_seq[2]+1):plot_seq[3]],
preds,
lty=lty[1],
...)
# Plot conf 1
# lines(data[[x]][(plot_seq[2]+1):plot_seq[3]],
#       conf_high,
#       lty=lty[2],
#       ...).
# Plot conf 2
# lines(data[[x]][(plot_seq[2]+1):plot_seq[3]],
#       conf_low,
#       lty=lty[2],
#       ...)
}
# Plot end of training data
source('functions\\plotting\\basic_data_plots.R')
plot_train_valid_data(data, config, colors=c('black', 'red'), lty=c(1, 2), lwd=2)
fit <- arima(data$p[1:config$N_train], order=c(1, 1, 0), xreg=data[1:config$N_train, c("Ws1", "Wd1")])
preds <- predict(fit, newxreg=data[config$N_train:dim(data)[1], c("Ws1", "Wd1")])
plot_fit(preds, config)
# Plot end of training data
source('functions\\plotting\\basic_data_plots.R')
plot_train_valid_data(data, config, colors=c('black', 'red'), lty=c(1, 2), lwd=2)
fit <- arima(data$p[1:config$N_train], order=c(1, 1, 0), xreg=data[1:config$N_train, c("Ws1", "Wd1")])
preds <- predict(fit, newxreg=data[config$N_train:dim(data)[1], c("Ws1", "Wd1")])
plot_fit(preds, config)
length(preds)
preds
plot_fit(preds$pred, config)
preds$pred
length(preds$pred)
# Plot end of training data
source('functions\\plotting\\basic_data_plots.R')
plot_train_valid_data(data, config, colors=c('black', 'red'), lty=c(1, 2), lwd=2)
fit <- arima(data$p[1:config$N_train], order=c(1, 1, 0), xreg=data[1:config$N_train, c("Ws1", "Wd1")])
preds <- predict(fit, newxreg=data[config$N_train:dim(data)[1], c("Ws1", "Wd1")])
plot_fit(preds$pred, config)
# Plot end of training data
source('functions\\plotting\\basic_data_plots.R')
plot_train_valid_data(data, config, colors=c('black', 'red'), lty=c(1, 2), lwd=2)
fit <- arima(data$p[1:config$N_train], order=c(1, 1, 0), xreg=data[1:config$N_train, c("Ws1", "Wd1")])
preds <- predict(fit, newxreg=data[config$N_train:dim(data)[1], c("Ws1", "Wd1")])
plot_fit(preds$pred, config)
plot(data$p[-1])
data$p[-1]
data$p
plot(data$p[-dim(data)[1]], data$p[-1])
data(coast)
data(landings)
byx = 1
byy = 0.5
xlim <- c(-15.5,0)
ylim <- c(50.25,56)
grd <- make.grid(landings$Lon,landings$Lat,landings$LiveWeight, byx, byy, xlim, ylim)
breaks <- breaks.grid(grd,zero=FALSE)
basemap(xlim, ylim, main = "Gadoid landings")
draw.grid(grd,breaks)
draw.shape(coast, col="darkgreen")
legend.grid("topright", breaks=breaks/1000, type=2, inset=0.02, title="tonnes")
matrix(c(1,2,3,4),nrow=2)
a = matrix(c(1,2,3,4),nrow=2)
dim(a)
c(2, 2) == dim(a)
all(c(2, 2) == dim(a))
all(c(2, 2) == dim(a)) == TRUE
stopifnot(all(c(2, 2) == dim(a)))
stopifnot(all(c(2, 4) == dim(a)))
length(dim(a))
a + 1
dim(a) == c(2, 2) == c(2, 2)
list(c(1,2,3), c(1,2))
b = list(c(1,2,3), c(1,2))
b[[1]]
b[[2]]
b[1]
b[[1]]
b[[1]] == c(1,2,3)
data$Ws1 < 7
data[["row_wise_regime"]] <- rep(NA, dim(data)[1])
data[data$Ws1 < 7, "row_wise_regime"]
thresh1_name = "Wd1"
data
names(data)
thresh1_name = "Wd1"
thresh2_name = "Ws1"
thresh_values = list(c(180, 300), c(7, 15))
thresh_values[[1]][1]
data[[thresh1_name]]
thresh1_name
thresh_values[[2]][1]
which((data[[thresh1_name]] < thresh_values[[1]][1]
& data[[thresh1_name]] < thresh_values[[2]][1]))
which(data[[thresh1_name]] < thresh_values[[1]][1]
& data[[thresh1_name]] < thresh_values[[2]][1])
library(RColorBrewer)
# Init
data[["row_wise_regime"]] <- rep(1, dim(data)[1])
for (i in 2:reg_dim[1])
{
for (j in 2:reg_dim[2])
{
idx <- which(data[[thresh1_name]] > thresh_values[[1]][i]
& data[[thresh2_name]] > thresh_values[[2]][j])
data[idx, "row_wise_regime"] <- regime
regime = regime + 1
}
}
reg_dim <- c(length(thresh_values[[1]]) + 1, length(thresh_values[[2]]) + 1)
reg_dim
# Init
data[["row_wise_regime"]] <- rep(1, dim(data)[1])
for (i in 2:reg_dim[1])
{
for (j in 2:reg_dim[2])
{
idx <- which(data[[thresh1_name]] > thresh_values[[1]][i]
& data[[thresh2_name]] > thresh_values[[2]][j])
data[idx, "row_wise_regime"] <- regime
regime = regime + 1
}
}
# Init
data[["row_wise_regime"]] <- rep(1, dim(data)[1])
regime <- 2
for (i in 2:reg_dim[1])
{
for (j in 2:reg_dim[2])
{
idx <- which(data[[thresh1_name]] > thresh_values[[1]][i]
& data[[thresh2_name]] > thresh_values[[2]][j])
data[idx, "row_wise_regime"] <- regime
regime = regime + 1
}
}
plot(data$Wd1, data$Ws1, col=data$row_wise_regime)
thresh_values[[1]][i]
# Init
data[["row_wise_regime"]] <- rep(1, dim(data)[1])
regime <- 2
for (i in 1:(reg_dim[1]-1))
{
for (j in 1:(reg_dim[2]-1))
{
idx <- which(data[[thresh1_name]] > thresh_values[[1]][i]
& data[[thresh2_name]] > thresh_values[[2]][j])
data[idx, "row_wise_regime"] <- regime
regime = regime + 1
}
}
plot(data$Wd1, data$Ws1, col=data$row_wise_regime)
thresh_values[[1]][i]
thresh_values
# Init
data[["row_wise_regime"]] <- rep(1, dim(data)[1])
regime <- 2
for (i in 1:(reg_dim[1]-1))
{
for (j in 1:(reg_dim[2]-1))
{
idx <- which((data[[thresh1_name]] > thresh_values[[1]][i]
& data[[thresh2_name]] > thresh_values[[2]][j]))
data[idx, "row_wise_regime"] <- regime
regime = regime + 1
}
}
plot(data$Wd1, data$Ws1, col=data$row_wise_regime)
# Init
data[["row_wise_regime"]] <- rep(1, dim(data)[1])
regime <- 2
for (i in 1:(reg_dim[1]-1))
{
for (j in 1:(reg_dim[2]-1))
{
idx1 <- which(data[[thresh1_name]] > thresh_values[[1]][i])
idx2 <- which(data[[thresh2_name]] > thresh_values[[2]][j])
idx <- c(idx1, idx2)
data[unique(idx), "row_wise_regime"] <- regime
regime = regime + 1
}
}
plot(data$Wd1, data$Ws1, col=data$row_wise_regime)
regime
reg_dim
thresh_values
1:(reg_dim[1]-1)
# Init
data[["row_wise_regime"]] <- rep(1, dim(data)[1])
regime <- 2
t1 <- c(min(data[[thresh1_name]]), thresh_values[[1]])
t2 <- c(min(data[[thresh2_name]]), thresh_values[[2]])
for (i in 1:(reg_dim[1]-1))
{
for (j in 1:(reg_dim[2]-1))
{
idx <- which(data[[thresh1_name]] >= t1[i]
& data[[thresh1_name]] < t1[(i+1)]
& data[[thresh2_name]] >= t2[j]
& data[[thresh2_name]] < t2[(j+1)])
data[idx, "row_wise_regime"] <- regime
regime = regime + 1
}
}
create_setar_thresholds <- function(data, thresh1_name,
thresh2_name, thresh_values,
reg_dim)
{
# Init
data[["row_wise_regime"]] <- rep(1, dim(data)[1])
regime <- 2
t1 <- c(min(data[[thresh1_name]]), thresh_values[[1]])
t2 <- c(min(data[[thresh2_name]]), thresh_values[[2]])
for (i in 1:(reg_dim[1]-1))
{
for (j in 1:(reg_dim[2]-1))
{
idx <- which(data[[thresh1_name]] >= t1[i]
& data[[thresh1_name]] < t1[(i+1)]
& data[[thresh2_name]] >= t2[j]
& data[[thresh2_name]] < t2[(j+1)])
data[idx, "row_wise_regime"] <- regime
regime = regime + 1
}
}
}
))
plot(data$Wd1, data$Ws1, col=data$row_wise_regime)
ceil(0.5)
ceiling(0.7)
# Init
data[["row_wise_regime"]] <- rep(1, dim(data)[1])
regime <- 2
t1 <- c(min(data[[thresh1_name]]), thresh_values[[1]], ceiling(max(data[[thresh1_name]])))
t2 <- c(min(data[[thresh2_name]]), thresh_values[[2]], ceiling(max(data[[thresh1_name]])))
for (i in 1:reg_dim[1])
{
for (j in 1:reg_dim[2])
{
idx <- which(data[[thresh1_name]] >= t1[i]
& data[[thresh1_name]] < t1[(i+1)]
& data[[thresh2_name]] >= t2[j]
& data[[thresh2_name]] < t2[(j+1)])
data[idx, "row_wise_regime"] <- regime
regime = regime + 1
}
}
plot(data$Wd1, data$Ws1, col=data$row_wise_regime)
plot(data$p[-dim(data)[1]], data$p[-1], col=data$row_wise_regime)
plot(data$Wd1, data$Ws1, col=data$row_wise_regime)
plot(data$Wd1, data$Ws1, col=data$row_wise_regime, pch=3)
plot(data$Ws1, data$p, col=data$row_wise_regime, pch=data$Wd1)
plot(data$Ws1, data$p, col=data$row_wise_regime)
create_setar_thresholds <- function(data, thresh1_name,
thresh2_name, thresh_values,
reg_dim)
{
# Init
data[["row_wise_regime"]] <- rep(1, dim(data)[1])
regime <- 2
# Extend threshold values
t1 <- c(min(data[[thresh1_name]]),
thresh_values[[1]],
ceiling(max(data[[thresh1_name]])))
t2 <- c(min(data[[thresh2_name]]),
thresh_values[[2]],
ceiling(max(data[[thresh1_name]])))
# Make regimes
for (i in 1:reg_dim[1])
{
for (j in 1:reg_dim[2])
{
idx <- which(data[[thresh1_name]] >= t1[i]
& data[[thresh1_name]] < t1[(i+1)]
& data[[thresh2_name]] >= t2[j]
& data[[thresh2_name]] < t2[(j+1)])
data[idx, "row_wise_regime"] <- regime
regime = regime + 1
}
}
return(list(data, matrix(c(1:regimes), nrow=reg_dim[1])))
}
c(1, 2, 3)
c(1, 2, 3)^2
>>>>>>> dc2c91fcdf2759902cd177a7dee58272781c7179
